NAME
    AnyEvent::Net::Curl::Queued - Any::Moose wrapper for queued downloads
    via Net::Curl & AnyEvent

VERSION
    version 0.027

SYNOPSIS
        #!/usr/bin/env perl

        package CrawlApache;
        use strict;
        use utf8;
        use warnings qw(all);

        use HTML::LinkExtor;
        use Any::Moose;

        extends 'AnyEvent::Net::Curl::Queued::Easy';

        after finish => sub {
            my ($self, $result) = @_;

            say $result . "\t" . $self->final_url;

            if (
                not $self->has_error
                and $self->getinfo('content_type') =~ m{^text/html}
            ) {
                my @links;

                HTML::LinkExtor->new(sub {
                    my ($tag, %links) = @_;
                    push @links,
                        grep { $_->scheme eq 'http' and $_->host eq 'localhost' }
                        values %links;
                }, $self->final_url)->parse(${$self->data});

                for my $link (@links) {
                    $self->queue->prepend(sub {
                        CrawlApache->new({ initial_url => $link });
                    });
                }
            }
        };

        no Any::Moose;
        __PACKAGE__->meta->make_immutable;

        1;

        package main;
        use strict;
        use utf8;
        use warnings qw(all);

        use AnyEvent::Net::Curl::Queued;

        my $q = AnyEvent::Net::Curl::Queued->new;
        $q->append(sub {
            CrawlApache->new({ initial_url => 'http://localhost/manual/' })
        });
        $q->wait;

DESCRIPTION
    AnyEvent::Net::Curl::Queued (a.k.a. YADA, *Yet Another Download
    Accelerator*) is an efficient and flexible batch downloader with a
    straight-forward interface capable of:

    *   create a queue;

    *   append/prepend URLs;

    *   wait for downloads to end (retry on errors).

    Download init/finish/error handling is defined through Moose's method
    modifiers.

  MOTIVATION
    I am very unhappy with the performance of LWP. It's almost perfect for
    properly handling HTTP headers, cookies & stuff, but it comes at the
    cost of *speed*. While this doesn't matter when you make single
    downloads, batch downloading becomes a real pain.

    When I download large batch of documents, I don't care about cookies or
    headers, only content and proper redirection matters. And, as it is
    clearly an I/O bottleneck operation, I want to make as many parallel
    requests as possible.

    So, this is what CPAN offers to fulfill my needs:

    *   Net::Curl: Perl interface to the all-mighty libcurl
        <http://curl.haxx.se/libcurl/>, is well-documented (opposite to
        WWW::Curl);

    *   AnyEvent: the DBI of event loops. Net::Curl also provides a nice and
        well-documented example of AnyEvent usage (03-multi-event.pl);

    *   MooseX::NonMoose: Net::Curl uses a Pure-Perl object implementation,
        which is lightweight, but a bit messy for my Moose-based projects.
        MooseX::NonMoose patches this gap.

    AnyEvent::Net::Curl::Queued is a glue module to wrap it all together. It
    offers no callbacks and (almost) no default handlers. It's up to you to
    extend the base class AnyEvent::Net::Curl::Queued::Easy so it will
    actually download something and store it somewhere.

  ALTERNATIVES
    As there's more than one way to do it, I'll list the alternatives which
    can be used to implement batch downloads:

    *   WWW::Mechanize: no (builtin) parallelism, no (builtin) queueing.
        Slow, but very powerful for site traversal;

    *   LWP::UserAgent: no parallelism, no queueing. WWW::Mechanize is built
        on top of LWP, by the way;

    *   LWP::Curl: LWP::UserAgent-alike interface for WWW::Curl. No
        parallelism, no queueing. Fast and simple to use;

    *   HTTP::Tiny: no parallelism, no queueing. Fast and part of CORE since
        Perl v5.13.9;

    *   HTTP::Lite: no parallelism, no queueing. Also fast;

    *   Furl: no parallelism, no queueing. Very fast;

    *   Mojo::UserAgent: capable of non-blocking parallel requests, no
        queueing;

    *   AnyEvent::Curl::Multi: queued parallel downloads via WWW::Curl.
        Queues are non-lazy, thus large ones can use many RAM;

    *   Parallel::Downloader: queued parallel downloads via AnyEvent::HTTP.
        Very fast and is pure-Perl (compiling event driver is optional). You
        only access results when the whole batch is done; so huge batches
        will require lots of RAM to store contents.

  BENCHMARK
    (see also: CPAN modules for making HTTP requests
    <http://neilb.org/reviews/http-requesters.html>)

    Obviously, the bottleneck of any kind of download agent is the
    connection itself. However, socket handling and header parsing add a
    lots of overhead.

    The script eg/benchmark.pl compares AnyEvent::Net::Curl::Queued against
    several other download agents. Only AnyEvent::Net::Curl::Queued itself,
    AnyEvent::Curl::Multi, Parallel::Downloader, Mojo::UserAgent and lftp
    <http://lftp.yar.ru/> support parallel connections natively; thus,
    Parallel::ForkManager is used to reproduce the same behaviour for the
    remaining agents. Both AnyEvent::Curl::Multi and LWP::Curl are frontends
    for WWW::Curl. Parallel::Downloader uses AnyEvent::HTTP as it's backend.

    The download target is a copy of the Apache documentation
    <http://httpd.apache.org/docs/2.2/> on a local Apache server. The test
    platform configuration:

    *   Intel® Core™ i7-2600 CPU @ 3.40GHz with 8 GB RAM;

    *   Ubuntu 11.10 (64-bit);

    *   Perl v5.16.1 (installed via perlbrew);

    *   libcurl 7.27.0 (without AsynchDNS, which slows down curl_easy_init()
        <http://curl.haxx.se/libcurl/c/curl_easy_init.html>).

                                 Request rate  W::M  LWP Mojo::UA H::Lite H::Tiny AE::C::M P::D lftp YADA Furl wget L::Curl curl
        WWW::Mechanize v1.72            280/s    -- -62%     -79%    -84%    -85%     -85% -90% -91% -91% -94% -95%    -96% -96%
        LWP::UserAgent v6.04            727/s  160%   --     -45%    -59%    -61%     -61% -73% -76% -77% -85% -88%    -90% -90%
        Mojo::UserAgent v3.39          1310/s  370%  81%       --    -26%    -29%     -30% -52% -57% -59% -73% -78%    -81% -82%
        HTTP::Lite v2.4                1780/s  535% 144%      35%      --     -4%      -6% -35% -42% -44% -63% -71%    -75% -76%
        HTTP::Tiny v0.017              1850/s  563% 155%      41%      4%      --      -1% -32% -39% -42% -62% -69%    -74% -75%
        AnyEvent::Curl::Multi v1.1     1880/s  573% 159%      43%      6%      1%       -- -31% -38% -41% -61% -69%    -73% -74%
        Parallel::Downloader v0.121560 2730/s  875% 275%     107%     53%     47%      45%   -- -11% -14% -44% -55%    -62% -63%
        lftp v4.3.1                    3050/s  992% 320%     132%     72%     65%      62%  12%   --  -4% -37% -50%    -57% -58%
        YADA v0.027                    3180/s 1037% 337%     142%     79%     71%      69%  17%   4%   -- -34% -48%    -55% -57%
        Furl v0.40                     4850/s 1634% 567%     269%    173%    161%     158%  78%  59%  53%   -- -20%    -32% -34%
        wget v1.12                     6060/s 2065% 733%     361%    241%    227%     222% 122%  98%  90%  25%   --    -15% -17%
        LWP::Curl v0.12                7090/s 2434% 875%     439%    299%    282%     277% 160% 132% 123%  46%  17%      --  -3%
        curl v7.27.0                   7310/s 2513% 905%     456%    311%    294%     288% 168% 139% 130%  51%  21%      3%   --

ATTRIBUTES
  allow_dups
    Allow duplicate requests (default: false). By default, requests to the
    same URL (more precisely, requests with the same signature are issued
    only once. To seed POST parameters, you must extend the
    AnyEvent::Net::Curl::Queued::Easy class. Setting "allow_dups" to true
    value disables request checks.

  completed
    Count completed requests.

  cv
    AnyEvent condition variable. Initialized automatically, unless you
    specify your own. Also reset automatically after "wait", so keep your
    own reference if you really need it!

  max
    Maximum number of parallel connections (default: 4; minimum value: 1).

  multi
    Net::Curl::Multi instance.

  queue
    "ArrayRef" to the queue. Has the following helper methods:

  queue_push
    Append item at the end of the queue.

  queue_unshift
    Prepend item at the top of the queue.

  dequeue
    Shift item from the top of the queue.

  count
    Number of items in queue.

  share
    Net::Curl::Share instance.

  stats
    AnyEvent::Net::Curl::Queued::Stats instance.

  timeout
    Timeout (default: 60 seconds).

  unique
    Signature cache.

  watchdog
    The last resort against the non-deterministic chaos of evil lurking
    sockets.

METHODS
  start()
    Populate empty request slots with workers from the queue.

  empty()
    Check if there are active requests or requests in queue.

  add($worker)
    Activate a worker.

  append($worker)
    Put the worker (instance of AnyEvent::Net::Curl::Queued::Easy) at the
    end of the queue. For lazy initialization, wrap the worker in a "sub {
    ... }", the same way you do with the Moose "default => sub { ... }":

        $queue->append(sub {
            AnyEvent::Net::Curl::Queued::Easy->new({ initial_url => 'http://.../' })
        });

  prepend($worker)
    Put the worker (instance of AnyEvent::Net::Curl::Queued::Easy) at the
    beginning of the queue. For lazy initialization, wrap the worker in a
    "sub { ... }", the same way you do with the Moose "default => sub { ...
    }":

        $queue->prepend(sub {
            AnyEvent::Net::Curl::Queued::Easy->new({ initial_url => 'http://.../' })
        });

  wait()
    Process queue.

CAVEAT
    *   If you mix in "fork()" calls you may get the *"Attempt to free
        unreferenced scalar: SV 0xdeadbeef during global destruction."*
        message on finalization.

    *   Many sources suggest to compile libcurl <http://curl.haxx.se/> with
        c-ares <http://c-ares.haxx.se/> support. This only improves
        performance if you are supposed to do many DNS resolutions (e.g.
        access many hosts). If you are fetching many documents from a single
        server, "c-ares" initialization will actually slow down the whole
        process!

SEE ALSO
    *   AnyEvent

    *   Any::Moose

    *   Net::Curl

    *   WWW::Curl

    *   AnyEvent::Curl::Multi

AUTHOR
    Stanislaw Pusep <stas@sysd.org>

COPYRIGHT AND LICENSE
    This software is copyright (c) 2012 by Stanislaw Pusep.

    This is free software; you can redistribute it and/or modify it under
    the same terms as the Perl 5 programming language system itself.

